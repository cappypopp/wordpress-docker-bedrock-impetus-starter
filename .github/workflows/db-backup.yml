name: Database Backup

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual triggering

jobs:
  backup:
    runs-on: ubuntu-latest

    env:
      # must be set in the repo secrets in repo settings > Secrets and Variables > Actions
      # Yes, you are duplicating the env vars here, but it's a small price to pay for the
      # ability to run the backup without having to have the .env file checked into the repo.
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}

      # these are required for the WordPress container to start since we use them in the docker-compose.yml file
      # but they are not needed for the DB backup. You could split the docker-compose.yml file into two files
      # and have a separate workflow for starting the WordPress container, but this is simpler.
      XDEBUG_PORT: 9025
      XDEBUG_IDEKEY: CURSOR
      WP_HTTP_PORT: 8181
      WP_HTTPS_PORT: 8443
      WP_THEME_NAME: impetus
      VITE_PORT: 5173

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate Docker Compose env file (.env.ci)
        run: |
          echo "DB_NAME=$DB_NAME
          DB_USER=$DB_USER
          DB_PASSWORD=$DB_PASSWORD
          DB_PORT=$DB_PORT
          XDEBUG_PORT=9025
          XDEBUG_IDEKEY=CURSOR
          WP_HTTP_PORT=8181
          WP_HTTPS_PORT=8443
          WP_THEME_NAME=impetus
          VITE_PORT=5173" > .env.ci
          
          # Debug: Print the file contents (mask sensitive data)
          echo "Generated .env.ci contents:"
          sed 's/DB_PASSWORD=.*/DB_PASSWORD=***/' .env.ci

      - name: Start Docker Compose (DB only)
        run: |
          # Debug: Print Docker Compose version
          docker compose version
          
          # Start DB with explicit environment file
          docker compose --env-file .env.ci up -d db

      - name: Wait for Database to be ready
        run: |
          echo "Waiting for MariaDB to be ready..."
          for i in {1..30}; do
            if docker compose --env-file .env.ci exec -T db mysqladmin ping -u"${DB_USER}" --password="${DB_PASSWORD}" --silent; then
              echo "✅ Database is ready!"
              exit 0
            fi
            echo "⏳ Waiting (attempt $i)..."
            sleep 2
          done
          echo "❌ Database did not become ready in time."
          exit 1

      - name: Validate DB Variables
        run: |
          if [[ -z "${DB_NAME}" || -z "${DB_USER}" || -z "${DB_PASSWORD}" || -z "${DB_PORT}" ]]; then
            echo "❌ ERROR: One or more DB environment variables are not set!"
            exit 1
          fi
          echo "✅ DB environment variables are properly set."

      - name: Export Database
        run: ./scripts/backup-db.zsh

      - name: Upload Database Backup
        uses: actions/upload-artifact@v4
        with:
          name: database-backup
          path: backup/
          retention-days: 7
